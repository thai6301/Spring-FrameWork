Section 7: Build Java Web
Sử dụng chú thích RequestMapping khi muốn cấu hình URL cho 1 method (Khi vào url thì sẽ hiện message hello)

<dependency>
	<groupId>org.apache.tomcat.embed</groupId>
	<artifactId>tomcat-embed-jasper</artifactId>
	<scope>provided</scope>
</dependency>(nếu muốn chạy JSP in Tomcat)
/myfirstwebapp/src/main/resources/META-INF/resources/WEB-INF/jsp/sayHello.jsp

tạo Views là khi muốn cấu hình URL đến 1 file jsp (để khi thay đổi giảm sự phức tạp, phải tạo file theo đường dẫn như trên)

ở file application phải configure spring.mvc.view.prefix và spring.mvc.view.suffix thì ở file controler chỉ cần return về tên file jsp và phần prefix không cần phải viết cả đoạn tên thư mục chỉ cần viết từ /WEB-INF/jsp là spring nó tự hiểu ( nếu không sẽ lỗi)

@RequestParam khi mà mình muốn chuyển gì đó vào dưới dạng tham số truy vấn
    Ví dụ : http://localhost:8080/login?name=thai và muốn dẫn đến view để hiển thị trong JSP thì sử dụng Model (ModelMap) và trong file jsp thì muốn lấy tham số thì đặt trong ${parameters}

Spring MVC Front Controller - Dispatcher Servlet : Đầu tiên, yêu cầu được nhận bởi Dispatcher Servlet. Nó xác định phương pháp điều khiển phù hợp. Phương thức Controller được thực thi. Phương thức Controller sẽ trả về View và Dispatcher Servlet sẽ cung cấp Model cho View và thực thi View. Và sau khi Chế độ xem được thực thi, phản hồi HTTP sẽ được trả về trình duyệt.

** Request vs Model vs Session
Request: Yêu cầu
Model thì những dữ liệu đặt trong model thì nó chỉ có sẵn ở trong phiên Request đó nếu chuyển sang Request khác thì nó k còn tác dụng nữa (ví dụ với name và password) còn với Session thì nó sẽ giữ lại dữ liệu với một số Request nhất định mà mình muốn

adding JSTL vào pom để sử dụng các tính năng trong file jsp
<dependency>
    <groupId>org.glassfish.web</groupId>
    <artifactId>jakarta.servlet.jsp.jstl</artifactId>
</dependency>
<%@ taglib prefix="c" uri="jakarta.tags.core" %>

Adding bootstrap css framework using webjar
/pom.xml
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap</artifactId>
	<version>5.1.3</version>
</dependency>
 
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>jquery</artifactId>
	<version>3.6.0</version>
</dependency>

Snippets
<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet" >
<script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
<script src="webjars/jquery/3.6.0/jquery.min.js"></script>

Adding Validation using Spring boot starter validation
Thêm vào pom.xml các phụ thuộc
Sử dụng các chú thích cần thiết ví dụ:@size... và cần có @Valid ở trước đối tượng cần Validation 

BindingResult: Khi bạn định nghĩa một phương thức trong controller để xử lý dữ liệu từ một form, bạn sẽ thêm một tham số kiểu BindingResult ngay sau tham số của đối tượng model. Thứ tự của các tham số này rất quan trọng, tóm lại là muốn hiển thị lỗi khi nhập form


/pom.xml để có thể chọn ngày thay vì viết text
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap-datepicker</artifactId>
	<version>1.9.0</version>
</dependency>


Snippets
<link href="webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css" rel="stylesheet" >
 
<fieldset class="mb-3">				
	<form:label path="description">Description</form:label>
	<form:input type="text" path="description" required="required"/>
	<form:errors path="description" cssClass="text-warning"/>
</fieldset>
<fieldset class="mb-3">				
	<form:label path="targetDate">Target Date</form:label>
	<form:input type="text" path="targetDate" required="required"/>
	<form:errors path="targetDate" cssClass="text-warning"/>
</fieldset>
		
<script src="webjars/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
<script type="text/javascript">
	$('#targetDate').datepicker({
	    format: 'yyyy-mm-dd'
	});
</script>


JSP fragments: là các phần của trang JSP có thể được tái sử dụng trong nhiều trang khác nhau.




Sử dụng LDAP hoặc database để quản lý thông tin